(define n-min 2)
(define n-max 100)
;; (define (counter)
;;   (define number 0)
;;   (define (f1 a)
;;     (cond ((<= a n-max)
;; 	   (f2 a n-min)
;; 	   (f1 (+ a 1)))))
;;   (define (f2 a b)
;;     (cond ((> b n-max))
;; 	  ((odd? b)
;; 	   (set! number (+ 1 number))
;; 	   (map display (list a "\t" b "\t" (expt a b) "\n"))
;; 	   (f2 a (+ b 1)))
;; 	  ((= 2 b)
;; 	   (map display (list a "\t" b "\t" (expt a b) "\n"))
;; 	   (set! number (+ 1 number))
;; 	   (f2 a (+ b 1)))
;; 	  ;; ((> (expt a (- b 2)) n-max)
;; 	  ;;  (map display (list a "\t" b "\t" (expt a b) "\n"))
;; 	  ;;  (set! number (+ 1 number))
;; 	  ;;  (f2 a (+ b 1)))
;; 	  (else (f2 a (+ b 1)))))
;;   (f1 n-min)
;;   number)
((lambda ()
   (define l '())
   (define f1
     (lambda (a)
       (cond ((<= a n-max)
	      (f2 a n-min)
	      (f1 (+ a 1))))))
   (define f2
     (lambda (a b)
       (cond ((<= b n-max)
	      (set! l (append l (list (expt a b))))
	      (f2 a (+ 1 b ))))))
   (define unique
     (lambda (pre now l l-new)
       (cond ((= 0 (length l))
       	      l-new)
       	     ((eq? #f (= pre now))
       	      (unique now (car l) (cdr l) (append l-new (list now))))
	     ((= pre now)
	      (unique now (car l) (cdr l) l-new)))))
   (f1 n-min)
   (display (length ((lambda  (l)(unique 0 (car l) (append (cdr l) '(#f)) (list))) (sort-list l <)
	    )))
   (newline)))
