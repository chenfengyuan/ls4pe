(define (++ n)(+ 1 n))
(define (debug n)
  (if (= DEBUG 1)
      (display n)))
(define (find-ways money)
  (define ways 0)
  (define (200p n left)
    (cond ((<= n (quotient left 200))
    (debug n)
	   (100p 0 (- left (* 200 n)))
	   (200p (++ n) left))
	  (else
	   ways)))
  (define (100p n left)
    (cond ((<= n (quotient left 100))
    (debug n)
	   (50p 0 (- left (* 100 n)))
	   (100p (++ n) left))))
  (define (50p n left)
    (cond ((<= n (quotient left 50))
    (debug n)
	   (20p 0 (- left (* 50 n)))
	   (50p (++ n) left))))
  (define (20p n left)
    (cond ((<= n (quotient left 20))
    (debug n)
	   (10p 0 (- left (* 20 n)))
	   (20p (++ n) left))))
  (define (10p n left)
    (cond ((<= n (quotient left 10))
    (debug n)
	   (5p 0 (- left (* 10 n)))
	   (10p (++ n) left))))
  (define (5p n left)
    (cond ((<= n (quotient left 5))
    (debug n)
	   (2p 0 (- left (* 5 n)))
	   (5p (++ n) left))))
  (define (2p n left)
    (cond ((<= n (quotient left 2))
    (debug n)
	   (1p 0 (- left (* 2 n)))
	   (2p (++ n ) left))))
  (define (1p  n left)
    (debug "\n")
    (set! ways (++ ways)))
  (200p 0 money))

(define DEBUG 0)
(display (find-ways 200))(newline)