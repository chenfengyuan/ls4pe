(define vector-exchange!
  (lambda (vec i j)
    (define temp (vector-ref vec i))
    (vector-set! vec i (vector-ref vec j))
    (vector-set! vec j temp)))
(define partition
  (lambda (vec p r)
    (define x (vector-ref vec r))
    (define iter
      (lambda (j i)
	(cond ((= j r)
	       (vector-exchange! vec (+ 1 i) r)
	       (+ 1 i))
	      ((<= (vector-ref vec j) x)
	       (vector-exchange! vec j (+ 1 i))
	       (iter (+ 1 j) (+ 1 i)))
	      (else
	       (iter (+ 1 j) i)))))
    (iter p (- p 1))))
(define quicksort
  (lambda (vec)
    (define (rec vec p r)
      (cond ((< p r)
	     (let ((q (partition vec p r)))
  	       (rec vec p (- q 1))
	       (rec vec (+ 1 q) r)))))
    (rec vec 0 (- (vector-length vec) 1))))
(define (number->list n)
  (define (iter n l)
    (cond ((> n 0)
	   (iter (quotient n 10) (append l (list (remainder n 10)))))
	  (else l)))
  (reverse (iter n '())))
(define (=or n a)
  (cond ((= n (car a))
	 #t)
	((> (length (cdr a)) 0)(=or n (cdr a)))
	(else #f)))
(define (1+ n)(+ 1 n))
(define (unshift-zero n l)
  (cond ((>= (length l) n)
	 l)
	(else (unshift-zero n (append (list 0) l)))))
(define (list-eq? l1 l2)
  (define (iter n)
    (cond ((< n 0)
	   #t)
	  (else
	   (if (= (list-ref l1 n) (list-ref l2 n))
	       (iter (- n 1))
	       #f))))
  (if (= (length l1) (length l2))
      (iter (- (length l1) 1))
      #f))
(define (sum-of-expt5 l)
  (define (expt5 n)(expt n 5))
  (apply + (map expt5 l)))
(define (find-number)
  (define l '())
  (define iter-number
    (lambda (a b c d e f)
      (cond
       ((= 10 a) l)
       ((= 10 b)
	(iter-number (1+ a) (1+ a) (1+ a) (1+ a) (1+ a) (1+ a)))
       ((= 10 c)
	(iter-number a (1+ b) (1+ b) (1+ b) (1+ b) (1+ b)))
       ((= 10 d)
	(iter-number a b (1+ c) (1+ c) (1+ c) (1+ c)))
       ((= 10 e)
	(iter-number a b c (1+ d) (1+ d) (1+ d)))
       ((= 10 f)
	(iter-number a b c d (1+ e) (1+ e)))
       (else
	(let (( vec (list->vector (unshift-zero 6 (number->list (sum-of-expt5 (list a b c d e f)))))))
	  (quicksort vec)
	  ;; (display (list a b c d e f))
	  ;; (display "\t")
	  ;; (display (vector->list vec))
	  (if (list-eq? (list a b c d e f) (vector->list vec))
	      ;; (display "t")
	      (begin
		;; (display (sum-of-expt5 (list a b c d e f)))(newline)
		(set! l (append l (list (sum-of-expt5 (list a b c d e f)))))))
	  ;; (newline)
	  (iter-number a b c d e (1+ f)))))))
  (iter-number 0 0 0 0 0 2))
(display (apply + (find-number)))(newline)
